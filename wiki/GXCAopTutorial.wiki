#summary Guice XML Configuration Interceptor Tutorial
 Production Readyという言葉をご存知でしょうか。[http://dl.google.com/googleio/2010/gwt-architecting-apps-production.pdf Google IO 2010のGWTのセッション]にProduction Readyという言葉がでてきます。あまり馴染みのない言葉ですが、Production Readyとは,「工業的に使える」という意味のようです([http://www.hyuki.com/yukiwiki/wiki.cgi?%C3%B1%B8%EC%C4%A2 単語帳]より）。


 インターセプタはProduction Readyの要素の一つ'Monitored(監視されている)'を実現する場合に便利な機能です。
 
 ここでは[GXCXmlTutorial Beer Hallサンプル] をインターセプタを使って、監視可能なサンプルとします。

== Beer Hallの稼働状況を監視する ==
 Beer Hallの稼働状態を監視するために、ビールの注文数(`BeerHall#serveBeer`メソッドの呼び出し回数）が分かるようにします。
 
 はじめに、注文数を数えあがるためのカウンターを作成します。
{{{
package sample.aop;

import java.util.concurrent.atomic.AtomicInteger;

import javax.inject.Singleton;

@Singleton
public class OrderCounter {
	private AtomicInteger counter = new AtomicInteger();

	public int getOurderCounter() {
		return counter.get();
	}

	public void increment() {
		counter.incrementAndGet();
	}

}
}}}
 カウンターを作る場合のポイントは下記の２点です。

  * @Singletonアノテーションを付加すること
    Singletonアノテーションを付加すると、DIコンテナ内でインスタンスが一つとなります。システム全体で、カウンターを一つにしたい場合などに@Singletonは使われます。

  * `AtomicInteger`を使うこと
    int型のフィールドはスレッドセーフではありません。カウンターのように複数のスレッドからのアクセスする可能性がある場合には、`AtomicInteger`を使う必要があります。


 次にインターセプタを作成し、メソッドの呼び出し時にカウンターをインクリメントさせます。
{{{
package sample.aop;

import javax.inject.Inject;
import javax.inject.Singleton;

import org.aopalliance.intercept.MethodInterceptor;
import org.aopalliance.intercept.MethodInvocation;

public class OrderCounterInterceptor implements MethodInterceptor {
	@Inject
	OrderCounter counter;

	@Override
	public Object invoke(MethodInvocation invocation) throws Throwable {
		counter.increment();
		return invocation.proceed();
	}

}
}}}
 OrderCounterは@Injectにより、DIコンテナから取得します。
 ここの処理では、メソッドの呼び出し(MethodInvocation#proceed)の前に、カウンターをインクリメントして、メソッドの呼び出し数を数え上げるようにしています。

-----
 === 補足 インターセプタのインタフェース===
 インターセプタのインタフェースは、２種類あります。このサンプルではAOP Allianceを利用しています。AOP AllianceはSpringとGuiceで使われているインタフェースです。一方、EJB3もインターセプタのインタフェースを持っています。EJB3やJBoss Seamで使われています。
 GXCではどちらのインタフェースも使えるようにしていますので、EJB3のインターセプタを使いたい人は試してみてください。

-----

 インターセプタを織り込むためには、クラスやメソッドにラベルを張る必要があります。そのラベルとなるアノテーションを用意します。
{{{
package sample.aop;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.METHOD)
public @interface Counted {

}
}}}

 このアノテーションを、`BeerHall#serveBeer`メソッドに設定して、`BeerHall#serveBeer`メソッドの呼び出された数を数え上げます。
{{{
package sample;

import javax.inject.Inject;
import javax.inject.Provider;

import sample.aop.Counted;

public class BeerHall {

	@Inject
	Provider<Beer> beerProvider;

	@Counted
	public Beer serveBeer() {
		return beerProvider.get();
	}

}
}}}

 @CountedアノテーションとOrderCounterInterceptorインターセプタを紐づけて、インターセプタを織り込むためには、下記のようなXMLファイルを書きます。
{{{
<beans xmlns:sample-aop="urn:import:sample.aop">

	<sample-aop:OrderCounterInterceptor />

	<interceptor-mapping annotation-with="@sample.aop.Counted">
		<interceptors>
			<value>#{orderCounterInterceptor}</value>
		</interceptors>
	</interceptor-mapping>

</beans>
}}}

 annotation-with属性でアノテーションを,interceptorsタグでインターセプタを紐づけして、インターセプタを織り込みます。

 では、上記のXMLを'sample/aop/OrderCounter.xml'に保存し動かしてみましょう。

 `BeerHall`サンプルを動かすためには、[GXCXmlTutorial Beer Hallサンプル] の設定も読み込ませる必要があるので、下記のような２つの設定を読み込ませるXMLを作成します。

{{{ 
<beans>
	<install class-path="sample/Malts.xml" />
	<install class-path="sample/aop/OrderCounter.xml" />
</beans>
}}}
 
 この設定を`sample/aop/CounterTest.xml`に保存します。

 次にテストケースを作成し、上記のXMLファイルを読み込ませます。
 
{{{
package sample.aop;

import junit.framework.Assert;

import org.junit.Test;

import sample.BeerHall;

import com.google.code.gxc.XmlModule;
import com.google.inject.Guice;
import com.google.inject.Injector;

public class CounterTest {

	@Test
	public void counterTest() {
		Injector injector = Guice.createInjector(XmlModule
				.create(CounterTest.class));
		BeerHall beerHall = injector.getInstance(BeerHall.class);

		beerHall.serveBeer();
		beerHall.serveBeer();
		beerHall.serveBeer();

		OrderCounter counter = injector.getInstance(OrderCounter.class);

		Assert.assertEquals(3, counter.getOurderCounter());
	}

}
}}}

 `BeerHall#serveBeer`メソッドを３回呼び出し、`Assert.assertEquals(3, counter.getOurderCounter());`で、カウンターが３になっていることを確認しています。

 これで`BeerHallの稼働状況`を監視できるよになりました。

------
 * おまけ (インターセプタの織り込み方法)
  インターセプタを織り込みは、クラス名やメソッド名のネーミングルールで織り込むことができますが推奨されていません。ネーミングルールでのインターセプタの織り込みは、偶然ネーミングルールとマッチしてしまい、クラスを作成している人が気がつかない状態でインターセプタが動作し、嵌ることがよくあります。アノテーションなら、コンパイル時にチェックされるので、そのようなミスもなくなりますので、複数人で開発する場合にはアノテーションによるインターセプタの織り込みを推奨します。