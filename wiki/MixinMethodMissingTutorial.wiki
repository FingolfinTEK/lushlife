#summary mix-in & method-missing tutorial
#labels tutorial

=== Step.3 mix-in & method-missing ===
 mix-inとmethod-missingを組み合わせたて使用することもできます。
 @MissingMethodと@MixinMethodを組み合わせて使います。

 * MethodMIssingMixinSample
{{{
package example;

import java.lang.reflect.Method;

import org.lushlife.negroni.MissingMethod;
import org.lushlife.negroni.Mixin;
import org.lushlife.negroni.MixinMethod;

public class MethodMIssingMixinSample {
	@Mixin
	private Object obj;

	// mix-in & method-missingの実装
	@MixinMethod
	public void methodMissing(@MissingMethod Method method) {
		System.out.println("mixin and method missing " + obj + " : " + method);
	}

}

}}}

 クラスへの組み込みは@Mixinedアノテーションでmix-inクラスを指定します。
 * MethodMissingMixinedSample
{{{
package example;

import org.lushlife.negroni.Mixined;

@Mixined(MethodMIssingMixinSample.class)
public abstract class MethodMissingMixinedSample {

	public abstract void invoke();

}
}}}

 実行するにはEnhancerにより拡張したクラスを生成します。
 * MainMethodMissingMixin
{{{
package example;

import org.lushlife.negroni.Enhancer;
import org.lushlife.negroni.Negroni;

public class MainMethodMissingMixin {
	public static void main(String[] args) throws InstantiationException,
			IllegalAccessException {
		Enhancer enhancer = Negroni.create();
		Class<? extends MethodMissingMixinedSample> enhancedClass = enhancer
				.enhace(MethodMissingMixinedSample.class);
		MethodMissingMixinedSample mixinSample = enhancedClass.newInstance();
		mixinSample.invoke();
	}
}

}}}
 * 実行結果
{{{
mixin and method missing example.MethodMissingMixinedSample_negloni$$0@be76c7 : public abstract void example.MethodMissingMixinedSample.invoke()
}}}