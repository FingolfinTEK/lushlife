#labels Tutorial,Phase-Implementation
method-missingとmix-inの単純なサンプルを用いて説明します。

== 動作環境 ==
 サンプルはsample pom.xmlの環境で動作させています。
 * sample pom.xml
{{{
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>sample</groupId>
	<artifactId>negroni-sample</artifactId>
	<packaging>jar</packaging>
	<name>Negroni Sample</name>
	<version>1.0</version>

	<repositories>
		<repository>
			<id>repository.jboss.org</id>
			<name>JBoss Repository</name>
			<url>http://repository.jboss.org/maven2</url>
		</repository>
		<repository>
			<id>repository.lushlife.code.google.com</id>
			<name>LushLife Repository</name>
			<url>http://lushlife.googlecode.com/svn/maven2</url>
		</repository>
	</repositories>

	<dependencies>
		<dependency>
			<groupId>org.lushlife.negroni</groupId>
			<artifactId>negroni</artifactId>
			<version>0.4</version>
		</dependency>
	</dependencies>

	<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<configuration>
						<source>1.5</source>
						<target>1.5</target>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>
</project>

}}}

=== Step.1 method-missing ===
 method-missingは定義していないメソッドが呼び出された場合の処理のハンドリングします。
 Javaでは定義していないメソッドは呼び出すことができないので、abstract methodが呼び出された場合のハンドリングするメソッドとして実装しています。

 method-missingは*実装されていないメソッド*がハンドリング対象ですので、Methodクラスを引数に取る必要があります。
 Negroniでは@MissingMethodアノテーションを付加したMethodクラスを引数に取るメソッドで,method-missingの実装を記述します。

 簡単な例を用意しました。引数のない未実装のメソッドが呼び出された場合にそのメソッドをSystem.outに出力する場合のサンプルです。
 * MethodMissingSample
{{{
package example;

import java.lang.reflect.Method;

import org.lushlife.negroni.MissingMethod;

public abstract class MethodMissingSample {
        // method-missingの実装
	public void methodMissing(@MissingMethod Method method) {
		System.out.println(method);
	}
        // 未実装のメソッド
	public abstract void invoke();
}

}}}

 未実装のメソッドを残しておくために、method-missingを実装したクラスは抽象クラスとしています。Javaの言語仕様上、抽象クラスはインスタンス化できませんのでNegroniではEnhancerクラスにより実装クラスを動的に生成します。

 先ほど作成したMethodMissingSampleを動作させるサンプルです。
 * MethodMissingMain
{{{
package example;

import org.lushlife.negroni.Enhancer;
import org.lushlife.negroni.Negroni;

public class MethodMissingMain {
	public static void main(String[] args) throws InstantiationException,
			IllegalAccessException {
		// Enhancerの取得
		Enhancer enhancer = Negroni.create();
		// クラスの拡張
		Class<? extends MethodMissingSample> enhacedClass = enhancer
				.enhace(MethodMissingSample.class);
		// インスタンスの生成
		MethodMissingSample methodMissingSample = enhacedClass.newInstance();
		// メソッドの実行
		methodMissingSample.invoke();
	}
}
}}}
 実行すると以下のように出力されます。
 * 実行結果
{{{
public abstract void example.MethodMissingSample.invoke()
}}}


== Step.2 mix-in ==
 mix-inは単体では動作しないメソッドを記述する。クラスと組み合わせることで動作するメソッドとなります。多重継承を禁止している言語で、複数のクラスで汎用的に利用する場合に便利な機能です。

 Rubyではmix-inとクラスの統合はダックタイピングなのでメソッド名を合わせるだけで動作させられます。
 Javaではダックタイピングは使えないので別の方法を準備する必要がありました。
 Negroniではmix-inを引数として取ることで連携をさせています。メソッドの引数に@MixinInstanceアノテーションを付加することで、連携クラスのインスタンスを引数として取るようにしています。


 サンプルでは連携クラスをSystem.outに出力しています。
 * MixinSample
{{{
package example;

import org.lushlife.negroni.MixinInstance;

public class MixInSample {
	// mix-inの実装
	public void mixin(@MixinInstance Object obj) {
		System.out.println("mixin " + obj);
	}
}
}}}

 次にmix-inメソッドに対応するインタフェースを用意します。
 @MixinInstanceが付与された引数を除いたメソッドを用意することになります。
 また@Mixinedアノテーションにより実装クラスと連携させます。
 * MixInInterface
{{{
package example;

import org.lushlife.negroni.Mixined;

@Mixined(MixInSample.class)
public interface MixInInterface {
	// mix-in メソッド
	public void mixin();
}
}}}

 mix-inとクラスを連携させるには、mix-inのインタフェースをimplementsに加えます。
 * MixInedSample
{{{
package example;

public abstract class MixInedSample implements MixInInterface {

}
}}}

 mix-inのクラスも抽象クラスとなるため,Enhancerで実装クラスを生成してインスタンス化させて呼び出します。
 * MixInMain
{{{
package example;

import org.lushlife.negroni.Enhancer;
import org.lushlife.negroni.Negroni;
public class MixInMain {
	public static void main(String[] args) throws InstantiationException,
			IllegalAccessException {
		Enhancer enhancer = Negroni.create();
		Class<? extends MixInedSample> enhancedClass = enhancer
				.enhace(MixInedSample.class);
		MixInedSample mixinSample = enhancedClass.newInstance();
		mixinSample.mixin();
	}

}
}}}
 実行すると次のように出力されます。
 * 実行結果
{{{
mixin example.MixInedSample_$$_javassist_0@fd7f6
}}}

=== Step.3 mix-in & method-missing ===
 mix-inとmethod-missingを組み合わせたて使用することもできます。
 @MissingMethodと@MixinInstanceを組み合わせて使います。

 * MixInMethodMissingSample
{{{
package example;

import java.lang.reflect.Method;

import org.lushlife.negroni.MissingMethod;
import org.lushlife.negroni.MixinInstance;

public class MixInMethodMissingSample {
	// mix-in & method-missingの実装
	public void methodMissing(@MixinInstance Object obj,
			@MissingMethod Method method) {
		System.out.println("mixin and method missing " + obj + " : " + method);
	}
}
}}}

 使用方法はmix-inと同じです。@Mixinedアノテーションによりmix-inの実装クラスを指定します。
 * MixInMethodMissingSample
{{{
package example;

import org.lushlife.negroni.Mixined;

@Mixined(MixInMethodMissingSample.class)
public abstract class MixInMethodMissingImpl {

	public abstract void invoke();

}
}}}

 実行は他と同様にEnhancerにより拡張したクラスを生成して実行します。
 * MixInMethodMissingMain
{{{
package example;

import org.lushlife.negroni.Enhancer;
import org.lushlife.negroni.Negroni;

public class MixInMethodMissingMain {
	public static void main(String[] args) throws InstantiationException,
			IllegalAccessException {

		Enhancer enhancer = Negroni.create();
		Class<? extends MixInMethodMissingImpl> enhancedClass = enhancer
				.enhace(MixInMethodMissingImpl.class);

		MixInMethodMissingImpl mixinSample = enhancedClass.newInstance();
		mixinSample.invoke();
	}
}
}}}
 * 実行結果
{{{
mixin and method missing example.MixInMethodMissingImpl_$$_javassist_0@18f51f : public abstract void example.MixInMethodMissingImpl.invoke()

}}}

== Next ==
 チュートリアルでは、メソッドに引数がある場合やタイプセーフ性についての説明はしていません。それらはMethodMappingで説明しています。